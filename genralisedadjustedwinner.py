# -*- coding: utf-8 -*-
"""GenralisedAdjustedWinner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-gyYYeb6bQy9B5SRumxQb1JisK5jcSW
"""

def generalized_adjusted_winner(N, O, U):
    """
    Generalized Adjusted Winner Algorithm for fair division between two agents.

    :param N: Set of two agents, [w, l].
    :param O: Set of items.
    :param U: Dictionary of utilities, keys as agents, and values as dictionaries of item utilities.
    :return: Allocation pi as a dictionary with agents as keys and sets of items as values.
    """
    w, l = N  # Unpacking the two agents
    pi = {w: set(), l: set()}  # Initialize allocations as empty sets

    # Step 2 and 3: Classify items into O_w, O_l, O_+, and O_-
    O_star_w = {o for o in O if U[w][o] >= 0 and U[l][o] <= 0}
    O_star_l = {o for o in O if U[l][o] >= 0 and U[w][o] < 0}
    O_plus = {o for o in O if U[w][o] > 0 and U[l][o] > 0}
    O_minus = {o for o in O if U[w][o] < 0 and U[l][o] < 0}

    # Step 4: Allocate items to agents based on the classification
    pi[w].update(O_plus.union(O_star_w))
    pi[l].update(O_minus.union(O_star_l))

    # Step 5: Sort items in O+ based on |l(u)/w(u)|
    sorted_items = sorted(
        O_plus.union(O_minus),
        key=lambda o: abs(U[l][o])/abs(U[w][o]),
        reverse=True
    )

    # Step 7-14: Redistribute items to reduce envy to within one item
    t = 0
    while t < len(sorted_items) and len(pi[w]) > 0 and len(pi[l]) > 0:
        # Assuming envying by more than one item is possible when both have items
        ot = sorted_items[t]
        if ot in O_plus:
            pi[w].remove(ot)
            pi[l].add(ot)
        elif ot in O_minus:
            pi[w].add(ot)
            pi[l].remove(ot)
        t += 1

    return pi

# Test cases
agents = ['w', 'l']
items = ['item1', 'item2', 'item3', 'item4']
utilities = {
    'w': {'item1': 1, 'item2': 2, 'item3': -1, 'item4': -2},
    'l': {'item1': -1, 'item2': -2, 'item3': 2, 'item4': 1}
}

allocation = generalized_adjusted_winner(agents, items, utilities)
print(allocation)